from typing import Final
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import asyncio
from aiohttp import ClientTimeout, ClientSession

TOKEN = ""
BOT_USERNAME: Final[str] = "@CSE_DIET_BOT"

# Google Drive file IDs
DRIVE_FILES = {
    '3_1_Syllabus': '1Lpec6MEOEyDKx3SWoDLSvSfk39zz5sEd',
    'CNN_Lab_Programs': '1VCfzXgrQ2KwcXOpeeJCflxVF7KONm2B4',
    'CNN_Unit_1': '1ch7OA00R2fJ9ACpZdtu6rcDH_zzlt-7I',
    'CNN_Unit_2': '1_ctCTVxaHPU3uTuRemga-Y0rJ2bXpjMb',
    'DWDM_Exp_1': '1ivlUe_jeDMqPnCdvdOCdvmGhY4utKtDr',
    'DWDM_Exp_2': '1bu_DyFJs053nud6TFvSdK2F_bh1CIva_',
    'DWDM_Exp_3': '1KXkk4Ri8ug30tupt2awzwsA8dFohBUQ5',
    'DWDM_UNIT_2_PPT': '1de4u0tsD0-LJD_fHMOwhAZiP_e_hTniQ',
    'DAA_Material_all_units': '1P12BpiPCfN2eqXSpvJOpRRlafEDeJPNa',
    'SPM_UNIT_1': '1xWVYQ_jEfz4gYRxBQqru2zc3-oTbng-I',
    'SPM_UNIT_2': '1AkezWr5tXKQip-qMkpdrRYCRdiDRyEkc',
    'RES_UNIT_1': '1sqDUp4cfv2DyEeZlwopntEXRqYtnAdmf',
    'RES_UNIT_2': '1DNZwF5hN0BVVefBIFzEP_k_M9R_BpZ-U',
    'RES_UNIT_3': '1OVuCwgy8j3zzZ1qxgpV7LGjloB3MDP_P',
    'RES_UNIT_4': '1BFX81ec-WegwYedJYtiHH2At87SRE7dn',
    'DevOps_Lab_Manual': '19SS4gepc6cqeCfK2UsszQOOehyZzoLTv'

}


DRIVE_DOWNLOAD_URL = "https://drive.google.com/uc?export=download&id="

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Hello! Welcome to the CSE DIET Bot.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = ("I can provide materials for your 3rd year, 1st semester subjects. Use these commands:\n\n"
                 "/syllabus - 3-1 Syllabus PDF\n"
                 "CNN -\n"
                 "\t/cnn_lab - CNN Lab Programs\n"
                 "\t/cnn_unit1 - CNN Unit 1\n"
                 "\t/cnn_unit2 - CNN Unit 2\n"
                 "DWDM -\n"
                 "\t/dwdm_unit2_ppt - DWDM Unit 2 PPT\n"
                 "\t/dwdm_exp1 - DWDM Experiment 1\n"
                 "\t/dwdm_exp2 - DWDM Experiment 2\n"
                 "\t/dwdm_exp3 - DWDM Experiment 3\n"
                 "DAA -\n"
                 "\t/daa - DAA Material (all units)\n"
                 "SPM -\n"
                 "\t/spm_unit1 - SPM Unit 1\n"
                 "\t/spm_unit2 - SPM Unit 2\n"
                 "OE -\n"
                 "\t/res_unit1 - RES Unit 1\n"
                 "\t/res_unit2 - RES Unit 2\n"
                 "\t/res_unit3 - RES Unit 3\n"
                 "\t/res_unit4 - RES Unit 4\n"
                 "DEVOPS -\n"
                 "\t/devops - DevOps Lab Manual")
    await update.message.reply_text(help_text)

async def update_processing_message(message):
    dots = 1
    while True:
        await message.edit_text(f"Processing your request{'.' * dots}")
        dots = (dots % 3) + 1
        await asyncio.sleep(1)

async def send_file(update: Update, context: ContextTypes.DEFAULT_TYPE, file_type: str):
    file_id = DRIVE_FILES.get(file_type)
    if file_id:
        file_url = DRIVE_DOWNLOAD_URL + file_id
        try:
            processing_message = await update.message.reply_text(f"Processing your request for {file_type}...")
            update_task = asyncio.create_task(update_processing_message(processing_message))

            timeout = ClientTimeout(total=300)
            async with ClientSession(timeout=timeout) as session:
                async with session.get(file_url) as response:
                    if response.status == 200:
                        content = await response.read()
                        pdf_file = f"{file_type}.pdf"
                        with open(pdf_file, 'wb') as f:
                            f.write(content)

                        update_task.cancel()
                        await processing_message.edit_text(f"Download complete. Sending {file_type}...")

                        with open(pdf_file, 'rb') as f:
                            await context.bot.send_document(chat_id=update.effective_chat.id, document=f, filename=pdf_file)

                        os.remove(pdf_file)
                        await processing_message.edit_text(f"{file_type} sent successfully!")
                    else:
                        await processing_message.edit_text(f"Failed to download the file. Status code: {response.status}")
        except asyncio.TimeoutError:
            await processing_message.edit_text("The download timed out. The file might be too large or there might be network issues.")
        except Exception as e:
            await processing_message.edit_text(f"Sorry, I couldn't send the file  ðŸ˜•. Error: {str(e)}")
    else:
        await update.message.reply_text(f"Sorry, I don't have a file for '{file_type}'.ðŸ˜ž")

# Individual command handlers for each file
async def syllabus_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, '3_1_Syllabus')

async def cnn_lab_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'CNN_Lab_Programs')

async def cnn_unit1_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'CNN_Unit_1')

async def cnn_unit2_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'CNN_Unit_2')

async def DWDM_UNIT_2_PPT(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'DWDM_UNIT_2_PPT')


async def dwdm_exp1_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'DWDM_Exp_1')

async def dwdm_exp2_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'DWDM_Exp_2')

async def dwdm_exp3_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'DWDM_Exp_3')

async def daa_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'DAA_Material_all_units')

async def spm_unit1_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'SPM_UNIT_1')

async def spm_unit2_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'SPM_UNIT_2')

async def res_unit1_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'RES_UNIT_1')

async def res_unit2_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'RES_UNIT_2')

async def res_unit3_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'RES_UNIT_3')

async def res_unit4_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'RES_UNIT_4')

async def devops_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_file(update, context, 'DevOps_Lab_Manual')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type: str = update.message.chat.type
    text: str = update.message.text

    print(f'User ({update.message.chat.id}) in {message_type}: "{text}"')

    if message_type == 'group':
        if BOT_USERNAME in text:
            new_text: str = text.replace(BOT_USERNAME, '').strip()
            response: str = "Please use one of the commands listed in /help to get subject materials."
        else:
            return
    else:
        response: str = "Please use one of the commands listed in /help to get subject materials."

    print('Bot:', response)
    await update.message.reply_text(response)

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')

if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()

    # Commands
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('syllabus', syllabus_command))
    app.add_handler(CommandHandler('cnn_lab', cnn_lab_command))
    app.add_handler(CommandHandler('cnn_unit1', cnn_unit1_command))
    app.add_handler(CommandHandler('cnn_unit2', cnn_unit2_command))
    app.add_handler(CommandHandler('dwdm_exp1', dwdm_exp1_command))
    app.add_handler(CommandHandler('dwdm_exp2', dwdm_exp2_command))
    app.add_handler(CommandHandler('dwdm_exp3', dwdm_exp3_command))
    app.add_handler(CommandHandler('daa', daa_command))
    app.add_handler(CommandHandler('spm_unit1', spm_unit1_command))
    app.add_handler(CommandHandler('spm_unit2', spm_unit2_command))
    app.add_handler(CommandHandler('res_unit1', res_unit1_command))
    app.add_handler(CommandHandler('res_unit2', res_unit2_command))
    app.add_handler(CommandHandler('res_unit3', res_unit3_command))
    app.add_handler(CommandHandler('res_unit4', res_unit4_command))
    app.add_handler(CommandHandler('devops', devops_command))
    app.add_handler(CommandHandler('dwdm_unit2_ppt', DWDM_UNIT_2_PPT))

    # Messages
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Errors
    app.add_error_handler(error)

    # Polls the bot
    print('Starting bot...')
    app.run_polling(poll_interval=3)
    print('Bot stopped.')
